name: Deploy to AWS ECS Fargate

on:
  push:
    branches:
      - main

jobs:
  list_files:
    name: List Repository Files
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Display All Files
        run: ls -R  # ✅ Lists all files before Terraform execution

  terraform:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: list_files  # ✅ Ensures file listing runs first
    permissions:
      id-token: write  # ✅ Enables OIDC token access
      contents: read
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials Using OIDC
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::123456789012:role/GitHubOIDCRole  # ✅ Replace with your IAM Role ARN
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Initialize Terraform & Modules
        run: terraform init -reconfigure  # ✅ Explicitly initialize modules

      - name: Check Terraform Configuration
        run: terraform plan

      - name: Apply Terraform Configuration
        run: terraform apply -auto-approve

  docker_build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: terraform  # ✅ Terraform must complete first
    permissions:
      id-token: write  # ✅ Enables OIDC authentication
      contents: read
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials Using OIDC
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::123456789012:role/GitHubOIDCRole  # ✅ Replace with your IAM Role ARN
          aws-region: us-east-1

      - name: Build and Push Docker Image to ECR
        run: |
          docker build -t ${{ secrets.AWS_ECR_REPO }} .
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_REPO }}
          docker tag ${{ secrets.AWS_ECR_REPO }}:latest ${{ secrets.AWS_ECR_REPO }}:latest
          docker push ${{ secrets.AWS_ECR_REPO }}:latest

  deploy:
    name: Deploy to ECS Fargate
    runs-on: ubuntu-latest
    needs: docker_build
    permissions:
      id-token: write  # ✅ Enables OIDC authentication
      contents: read
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials Using OIDC
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::539935451710:oidc-provider/token.actions.githubusercontent.com  # ✅ Replace with your IAM Role ARN
          aws-region: us-east-1

      - name: Apply ECS Deployment Manifest
        run: |
          cd manifest  # ✅ Corrected directory name
          kubectl apply -f deployment.yaml
          kubectl apply -f service.yaml
          kubectl apply -f ingress.yaml

      - name: Force New ECS Fargate Deployment
        run: |
          aws ecs update-service --cluster hcl-hackathon-devops-kamal-ECSFargate \
          --service hcl-service \
          --force-new-deployment
